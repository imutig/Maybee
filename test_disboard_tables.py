#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement des tables Disboard
Ce script teste l'insertion et la r√©cup√©ration de donn√©es dans toutes les tables
"""

import asyncio
import aiomysql
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

# Charger les variables d'environnement
load_dotenv()

async def test_disboard_tables():
    """Teste le bon fonctionnement des tables du syst√®me Disboard"""
    
    # Configuration de la base de donn√©es
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 3306)),
        'user': os.getenv('DB_USER', 'root'),
        'password': os.getenv('DB_PASS', ''),
        'db': os.getenv('DB_NAME', 's1032881_Maybee'),
        'charset': 'utf8mb4',
        'autocommit': True
    }
    
    try:
        # Connexion √† la base de donn√©es
        print("üîå Connexion √† la base de donn√©es...")
        pool = await aiomysql.create_pool(**db_config)
        
        async with pool.acquire() as conn:
            async with conn.cursor() as cursor:
                print("‚úÖ Connexion √©tablie")
                
                # Test 1: Insertion dans disboard_config
                print("\nüß™ Test 1: Configuration du serveur...")
                test_guild_id = 123456789
                test_channel_id = 987654321
                test_role_id = 555666777
                
                await cursor.execute("""
                    INSERT INTO disboard_config 
                    (guild_id, reminder_channel_id, bump_role_id, reminder_enabled, reminder_interval_hours)
                    VALUES (%s, %s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                    reminder_channel_id = VALUES(reminder_channel_id),
                    bump_role_id = VALUES(bump_role_id),
                    reminder_enabled = VALUES(reminder_enabled),
                    reminder_interval_hours = VALUES(reminder_interval_hours)
                """, (test_guild_id, test_channel_id, test_role_id, True, 2))
                
                print("‚úÖ Configuration ins√©r√©e/mise √† jour")
                
                # Test 2: Insertion dans disboard_bumps
                print("\nüß™ Test 2: Enregistrement d'un bump...")
                test_bumper_id = 111222333
                test_bumper_name = "TestUser#1234"
                test_bump_time = datetime.now()
                
                await cursor.execute("""
                    INSERT INTO disboard_bumps 
                    (guild_id, bumper_id, bumper_name, channel_id, bump_time, bumps_count)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (test_guild_id, test_bumper_id, test_bumper_name, test_channel_id, test_bump_time, 1))
                
                print("‚úÖ Bump enregistr√©")
                
                # Test 3: Insertion dans disboard_reminders
                print("\nüß™ Test 3: Enregistrement d'un rappel...")
                test_reminder_time = datetime.now() + timedelta(hours=2)
                
                await cursor.execute("""
                    INSERT INTO disboard_reminders 
                    (guild_id, channel_id, reminder_time)
                    VALUES (%s, %s, %s)
                """, (test_guild_id, test_channel_id, test_reminder_time))
                
                print("‚úÖ Rappel enregistr√©")
                
                # Test 4: V√©rification des donn√©es ins√©r√©es
                print("\nüß™ Test 4: V√©rification des donn√©es...")
                
                # V√©rifier la configuration
                await cursor.execute("""
                    SELECT guild_id, reminder_channel_id, bump_role_id, reminder_enabled, reminder_interval_hours
                    FROM disboard_config WHERE guild_id = %s
                """, (test_guild_id,))
                
                config_result = await cursor.fetchone()
                if config_result:
                    print(f"‚úÖ Configuration r√©cup√©r√©e: Guild {config_result[0]}, Channel {config_result[1]}, Role {config_result[2]}")
                else:
                    print("‚ùå Configuration non trouv√©e")
                
                # V√©rifier le bump
                await cursor.execute("""
                    SELECT guild_id, bumper_id, bumper_name, bumps_count
                    FROM disboard_bumps WHERE guild_id = %s
                """, (test_guild_id,))
                
                bump_result = await cursor.fetchone()
                if bump_result:
                    print(f"‚úÖ Bump r√©cup√©r√©: User {bump_result[2]} ({bump_result[1]}) - {bump_result[3]} bump(s)")
                else:
                    print("‚ùå Bump non trouv√©")
                
                # V√©rifier le rappel
                await cursor.execute("""
                    SELECT guild_id, channel_id, reminder_time
                    FROM disboard_reminders WHERE guild_id = %s
                """, (test_guild_id,))
                
                reminder_result = await cursor.fetchone()
                if reminder_result:
                    print(f"‚úÖ Rappel r√©cup√©r√©: Channel {reminder_result[1]}, Time {reminder_result[2]}")
                else:
                    print("‚ùå Rappel non trouv√©")
                
                # Test 5: Nettoyage des donn√©es de test
                print("\nüß™ Test 5: Nettoyage des donn√©es de test...")
                
                await cursor.execute("DELETE FROM disboard_reminders WHERE guild_id = %s", (test_guild_id,))
                await cursor.execute("DELETE FROM disboard_bumps WHERE guild_id = %s", (test_guild_id,))
                await cursor.execute("DELETE FROM disboard_config WHERE guild_id = %s", (test_guild_id,))
                
                print("‚úÖ Donn√©es de test supprim√©es")
                
                # Test 6: V√©rification finale
                print("\nüß™ Test 6: V√©rification finale...")
                
                for table_name in ['disboard_bumps', 'disboard_reminders', 'disboard_config']:
                    await cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    result = await cursor.fetchone()
                    count = result[0] if result else 0
                    print(f"üìä {table_name}: {count} lignes")
                
                print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
                print("‚úÖ Les tables du syst√®me Disboard fonctionnent parfaitement")
                
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False
    
    finally:
        if 'pool' in locals():
            pool.close()
            await pool.wait_closed()
    
    return True

if __name__ == "__main__":
    print("üß™ Test des tables Disboard")
    print("=" * 50)
    
    # Ex√©cuter les tests
    success = asyncio.run(test_disboard_tables())
    
    if success:
        print("\n‚úÖ Tests termin√©s avec succ√®s")
    else:
        print("\n‚ùå Tests √©chou√©s")
        exit(1)


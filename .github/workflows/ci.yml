name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f web/requirements.txt ]; then pip install -r web/requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Run tests if they exist
        if [ -d "tests" ]; then pytest tests/ -v; fi
    
    - name: Check imports
      run: |
        # Check if main modules can be imported
        python -c "import main; print('✅ Main bot module imports successfully')" || echo "⚠️ Main module import failed"
        python -c "import sys; sys.path.append('web'); import main as web_main; print('✅ Web module imports successfully')" || echo "⚠️ Web module import failed"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
    
    - name: Check for known security vulnerabilities
      run: |
        pip freeze | safety check || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
    
    - name: Check code formatting with Black
      run: |
        black --check --diff . || echo "⚠️ Code formatting issues found. Run 'black .' to fix."
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "⚠️ Import sorting issues found. Run 'isort .' to fix."
    
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports || echo "⚠️ Type checking issues found."

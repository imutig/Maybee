#!/usr/bin/env python3
"""
Script pour v√©rifier et cr√©er les tables du syst√®me Disboard
Ce script s'assure que toutes les tables n√©cessaires existent dans la base de donn√©es
"""

import asyncio
import aiomysql
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

async def ensure_disboard_tables():
    """V√©rifie et cr√©e les tables du syst√®me Disboard si elles n'existent pas"""
    
    # Configuration de la base de donn√©es
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 3306)),
        'user': os.getenv('DB_USER', 'root'),
        'password': os.getenv('DB_PASS', ''),
        'db': os.getenv('DB_NAME', 's1032881_Maybee'),
        'charset': 'utf8mb4',
        'autocommit': True
    }
    
    try:
        # Connexion √† la base de donn√©es
        print("üîå Connexion √† la base de donn√©es...")
        pool = await aiomysql.create_pool(**db_config)
        
        async with pool.acquire() as conn:
            async with conn.cursor() as cursor:
                print("‚úÖ Connexion √©tablie")
                
                # V√©rifier et cr√©er la table disboard_bumps
                print("\nüìä V√©rification de la table disboard_bumps...")
                await cursor.execute("""
                    CREATE TABLE IF NOT EXISTS disboard_bumps (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        guild_id BIGINT NOT NULL,
                        bumper_id BIGINT NOT NULL,
                        bumper_name VARCHAR(255) NOT NULL,
                        channel_id BIGINT NOT NULL,
                        bump_time TIMESTAMP NOT NULL,
                        bumps_count INT DEFAULT 1,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        INDEX idx_guild_id (guild_id),
                        INDEX idx_bumper_id (bumper_id),
                        INDEX idx_bump_time (bump_time),
                        INDEX idx_guild_bump_time (guild_id, bump_time)
                    )
                """)
                print("‚úÖ Table disboard_bumps v√©rifi√©e/cr√©√©e")
                
                # V√©rifier et cr√©er la table disboard_reminders
                print("\nüìä V√©rification de la table disboard_reminders...")
                await cursor.execute("""
                    CREATE TABLE IF NOT EXISTS disboard_reminders (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        guild_id BIGINT NOT NULL,
                        channel_id BIGINT NOT NULL,
                        reminder_time TIMESTAMP NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX idx_guild_id (guild_id),
                        INDEX idx_reminder_time (reminder_time),
                        INDEX idx_guild_reminder_time (guild_id, reminder_time)
                    )
                """)
                print("‚úÖ Table disboard_reminders v√©rifi√©e/cr√©√©e")
                
                # V√©rifier et cr√©er la table disboard_config
                print("\nüìä V√©rification de la table disboard_config...")
                await cursor.execute("""
                    CREATE TABLE IF NOT EXISTS disboard_config (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        guild_id BIGINT NOT NULL UNIQUE,
                        reminder_channel_id BIGINT DEFAULT NULL,
                        bump_role_id BIGINT DEFAULT NULL,
                        reminder_enabled BOOLEAN DEFAULT TRUE,
                        reminder_interval_hours INT DEFAULT 2,
                        bump_confirmation_enabled BOOLEAN DEFAULT TRUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        INDEX idx_guild_id (guild_id)
                    )
                """)
                print("‚úÖ Table disboard_config v√©rifi√©e/cr√©√©e")
                
                # V√©rifier si la colonne bump_role_id existe
                print("\nüîç V√©rification de la colonne bump_role_id...")
                await cursor.execute("""
                    SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
                    WHERE TABLE_SCHEMA = %s 
                    AND TABLE_NAME = 'disboard_config' 
                    AND COLUMN_NAME = 'bump_role_id'
                """, (db_config['db'],))
                
                result = await cursor.fetchone()
                if result[0] == 0:
                    print("‚ûï Ajout de la colonne bump_role_id...")
                    await cursor.execute("""
                        ALTER TABLE disboard_config 
                        ADD COLUMN bump_role_id BIGINT DEFAULT NULL AFTER reminder_channel_id
                    """)
                    print("‚úÖ Colonne bump_role_id ajout√©e")
                else:
                    print("‚úÖ Colonne bump_role_id existe d√©j√†")
                
                # V√©rifier si l'index idx_bump_role_id existe
                print("\nüîç V√©rification de l'index idx_bump_role_id...")
                await cursor.execute("""
                    SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS 
                    WHERE TABLE_SCHEMA = %s 
                    AND TABLE_NAME = 'disboard_config' 
                    AND INDEX_NAME = 'idx_bump_role_id'
                """, (db_config['db'],))
                
                result = await cursor.fetchone()
                if result[0] == 0:
                    print("‚ûï Cr√©ation de l'index idx_bump_role_id...")
                    await cursor.execute("""
                        CREATE INDEX idx_bump_role_id ON disboard_config(bump_role_id)
                    """)
                    print("‚úÖ Index idx_bump_role_id cr√©√©")
                else:
                    print("‚úÖ Index idx_bump_role_id existe d√©j√†")
                
                # Afficher le statut des tables
                print("\nüìã Statut des tables du syst√®me Disboard:")
                print("-" * 50)
                
                for table_name in ['disboard_bumps', 'disboard_reminders', 'disboard_config']:
                    await cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    result = await cursor.fetchone()
                    count = result[0] if result else 0
                    print(f"üìä {table_name}: {count} lignes")
                
                print("\nüéâ Toutes les tables du syst√®me Disboard sont pr√™tes !")
                
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    finally:
        if 'pool' in locals():
            pool.close()
            await pool.wait_closed()
    
    return True

if __name__ == "__main__":
    print("üöÄ Script de v√©rification des tables Disboard")
    print("=" * 50)
    
    # Ex√©cuter la v√©rification
    success = asyncio.run(ensure_disboard_tables())
    
    if success:
        print("\n‚úÖ Script termin√© avec succ√®s")
    else:
        print("\n‚ùå Script termin√© avec des erreurs")
        exit(1)

import discord
from discord.ext import commands
from discord import app_commands
import logging
import random
import asyncio
from typing import Optional, Dict, List, Set
from datetime import datetime
from i18n import _
from .command_logger import log_command_usage
from custom_emojis import SUCCESS, ERROR, WARNING, INFO, CLOCK, CHECK, CROSS

logger = logging.getLogger(__name__)

# Images du jeu
GAME_SETUP_IMAGE = "https://static.fnac-static.com/multimedia/Images/FR/NR/1e/97/2b/2856734/1541-1/tsp20161013102534/Les-Loups-Garous-de-Thiercelieux-Asmodee.jpg"
ROLE_DISTRIBUTION_IMAGE = "https://cdn.unitycms.io/images/6SWyNzu2a8z9F1TdLk0nMP.jpg?op=ocroped&val=1200,800,1000,1000,0,0&sum=9bFR7Uq8a9A"

# Cartes des r√¥les
ROLE_CARDS = {
    "villageois": "https://static.wikia.nocookie.net/loupgaroumal/images/d/d6/Carte_SimpleVillaegois.png/revision/latest?cb=20210104170925&path-prefix=fr",
    "loup": "https://static.wikia.nocookie.net/loupgaroumal/images/1/1e/Carte2.png/revision/latest/scale-to-width-down/250?cb=20210104171045&path-prefix=fr",
    "voyante": "https://static.wikia.nocookie.net/loupgaroumal/images/b/be/Carte3.png/revision/latest?cb=20210104171212&path-prefix=fr",
    "chasseur": "https://static.wikia.nocookie.net/loupgaroumal/images/0/0e/Carte6.png/revision/latest?cb=20210104171604&path-prefix=fr",
    "salvateur": "https://static.wikia.nocookie.net/loupgaroumal/images/3/37/Carte4.png/revision/latest?cb=20240615180235&path-prefix=fr",
    "renard": "https://static.wikia.nocookie.net/loupgaroumal/images/c/c4/Carte24.png/revision/latest?cb=20240616113010&path-prefix=fr",
    "sorciere": "https://www.regledujeu.fr/wp-content/uploads/sorciere.png",
    "cupidon": "https://www.regledujeu.fr/wp-content/uploads/cupidon.png",
    "petite_fille": "https://www.regledujeu.fr/wp-content/uploads/petite-fille.png",
    "ange": "https://m.media-amazon.com/images/I/51ib5kyNfnL._AC_UF350,350_QL80_.jpg",
    # Pour les r√¥les sans image sp√©cifique, on utilisera l'image g√©n√©rale
    "voleur": ROLE_DISTRIBUTION_IMAGE,
}

# R√¥les disponibles
ROLES = {
    "loup": {"team": "loups", "night_action": True, "emoji": "üê∫"},
    "villageois": {"team": "village", "night_action": False, "emoji": "üë®"},
    "voyante": {"team": "village", "night_action": True, "emoji": "üîÆ"},
    "chasseur": {"team": "village", "night_action": False, "emoji": "üèπ"},
    "salvateur": {"team": "village", "night_action": True, "emoji": "üõ°Ô∏è"},
    "renard": {"team": "village", "night_action": True, "emoji": "ü¶ä"},
    "cupidon": {"team": "village", "night_action": True, "emoji": "üíò"},
    "sorciere": {"team": "village", "night_action": True, "emoji": "üßô‚Äç‚ôÄÔ∏è"},
    "petite_fille": {"team": "village", "night_action": False, "emoji": "üëß"},
    "voleur": {"team": "village", "night_action": True, "emoji": "ü¶π"},
    "ange": {"team": "ange", "night_action": False, "emoji": "üëº"},
}

class LoupGarouGame:
    """Classe repr√©sentant une partie de Loup-Garou"""
    
    def __init__(self, guild_id: int, channel: discord.TextChannel, organizer: discord.Member, 
                 debate_time: int = 60, vote_time: int = 120):
        self.guild_id = guild_id
        self.channel = channel
        self.organizer = organizer
        self.players: Dict[int, discord.Member] = {}  # user_id -> Member
        self.roles: Dict[int, str] = {}  # user_id -> role
        self.alive_players: Set[int] = set()
        self.dead_players: Set[int] = set()
        self.lovers: List[int] = []  # Liste des amoureux (2 joueurs max)
        self.mayor: Optional[int] = None  # ID du maire
        self.angel_id: Optional[int] = None  # ID de l'ange
        self.angel_first_vote_passed = False  # Si le premier vote est pass√© pour l'ange
        self.phase = "setup"  # setup, night, day, voting, ended
        self.day_number = 0
        self.votes: Dict[int, int] = {}  # voter_id -> target_id
        self.vote_times: Dict[int, float] = {}  # voter_id -> timestamp
        self.vote_start_time: Optional[float] = None  # D√©but du vote
        self.night_actions: Dict[str, any] = {}  # role -> action_data
        self.game_message: Optional[discord.Message] = None
        self.sorciere_heal_used = False
        self.sorciere_poison_used = False
        self.last_victim: Optional[int] = None
        # Dur√©es configurables
        self.debate_time = debate_time  # Dur√©e du d√©bat en secondes
        self.vote_time = vote_time  # Dur√©e du vote en secondes
        # √âtat de la petite fille
        self.petite_fille_spying = False  # Si la petite fille a choisi d'espionner
        # √âtat du salvateur
        self.salvateur_last_protected: Optional[int] = None  # Derni√®re personne prot√©g√©e par le salvateur
        
    def add_player(self, member: discord.Member) -> bool:
        """Ajoute un joueur √† la partie"""
        if member.id not in self.players and len(self.players) < 20:
            self.players[member.id] = member
            return True
        return False
    
    def remove_player(self, member: discord.Member) -> bool:
        """Retire un joueur de la partie"""
        if member.id in self.players and self.phase == "setup":
            del self.players[member.id]
            return True
        return False
    
    def assign_roles(self, role_distribution: Dict[str, int]):
        """Attribue les r√¥les aux joueurs"""
        available_roles = []
        for role, count in role_distribution.items():
            available_roles.extend([role] * count)
        
        random.shuffle(available_roles)
        player_ids = list(self.players.keys())
        random.shuffle(player_ids)
        
        for player_id, role in zip(player_ids, available_roles):
            self.roles[player_id] = role
            self.alive_players.add(player_id)
            
            # Identifie l'ange s'il y en a un
            if role == "ange":
                self.angel_id = player_id
    
    def kill_player(self, user_id: int):
        """Tue un joueur"""
        if user_id in self.alive_players:
            self.alive_players.remove(user_id)
            self.dead_players.add(user_id)
            
            # Si un amoureux meurt, l'autre meurt aussi
            if user_id in self.lovers:
                for lover_id in self.lovers:
                    if lover_id != user_id and lover_id in self.alive_players:
                        self.alive_players.remove(lover_id)
                        self.dead_players.add(lover_id)
    
    def check_victory(self) -> Optional[str]:
        """V√©rifie si une √©quipe a gagn√©"""
        loups_alive = sum(1 for uid in self.alive_players if self.roles.get(uid) == "loup")
        village_alive = len(self.alive_players) - loups_alive
        
        if loups_alive == 0:
            return "village"
        elif loups_alive >= village_alive:
            return "loups"
        
        # V√©rifie si les amoureux sont les derniers survivants
        if len(self.alive_players) == 2 and len(self.lovers) == 2:
            if all(lover_id in self.alive_players for lover_id in self.lovers):
                return "lovers"
        
        return None

class GameSetupView(discord.ui.View):
    """Vue pour configurer et d√©marrer une partie"""
    
    def __init__(self, game: LoupGarouGame, cog):
        super().__init__(timeout=300)
        self.game = game
        self.cog = cog
        self.role_distribution = {"loup": 1, "villageois": 3, "voyante": 1}
    
    @discord.ui.button(label="Rejoindre", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def join_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.game.add_player(interaction.user):
            await interaction.response.send_message(
                _("loupgarou.joined", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            await self.update_game_message()
        else:
            await interaction.response.send_message(
                _("loupgarou.already_joined", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
    
    @discord.ui.button(label="Quitter", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def leave_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.game.remove_player(interaction.user):
            await interaction.response.send_message(
                _("loupgarou.left", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            await self.update_game_message()
        else:
            await interaction.response.send_message(
                _("loupgarou.not_in_game", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
    
    @discord.ui.button(label="R√¥les de base", style=discord.ButtonStyle.blurple, emoji="‚öôÔ∏è")
    async def config_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.organizer.id:
            await interaction.response.send_message(
                _("loupgarou.only_organizer", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        modal = RoleConfigModal(self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="R√¥les sp√©ciaux", style=discord.ButtonStyle.blurple, emoji="‚ú®")
    async def special_roles_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.organizer.id:
            await interaction.response.send_message(
                _("loupgarou.only_organizer", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        modal = SpecialRolesConfigModal(self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="Temps", style=discord.ButtonStyle.secondary, emoji="‚è±Ô∏è")
    async def time_config_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.organizer.id:
            await interaction.response.send_message(
                _("loupgarou.only_organizer", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        modal = TimeConfigModal(self)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="Voir les r√®gles", style=discord.ButtonStyle.secondary, emoji="üìñ")
    async def rules_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Affiche les r√®gles g√©n√©rales avec la possibilit√© de voir les d√©tails des r√¥les
        view = RulesView(self.game.guild_id)
        embed = discord.Embed(
            title="üìñ R√®gles du Loup-Garou",
            description=(
                "**üéØ Objectif du jeu**\n"
                "Le village est divis√© en deux √©quipes :\n"
                "‚Ä¢ **üê∫ Loups-Garous** : √âliminer tous les villageois\n"
                "‚Ä¢ **üë• Villageois** : √âliminer tous les loups-garous\n\n"
                "**üåô Phase de Nuit**\n"
                "Les loups-garous se r√©veillent et choisissent une victime. "
                "Certains r√¥les sp√©ciaux peuvent agir la nuit (Voyante, Sorci√®re, etc.).\n\n"
                "**‚òÄÔ∏è Phase de Jour**\n"
                "Le village d√©couvre la victime de la nuit. "
                "Les joueurs d√©battent puis votent pour √©liminer un suspect.\n\n"
                "**üé≠ R√¥les Sp√©ciaux**\n"
                "Chaque r√¥le poss√®de des capacit√©s uniques. "
                "Utilisez le menu ci-dessous pour consulter les d√©tails de chaque r√¥le !\n\n"
                "**üíò R√®gles Sp√©ciales**\n"
                "‚Ä¢ **Maire** : √âlu en d√©but de partie, sa voix compte double en cas d'√©galit√©\n"
                "‚Ä¢ **Cupidon** : D√©signe deux amoureux qui mourront ensemble\n"
                "‚Ä¢ **Ange** : Doit se faire √©liminer au premier tour pour gagner seul"
            ),
            color=discord.Color.blue()
        )
        embed.set_footer(text="S√©lectionnez un r√¥le ci-dessous pour voir ses d√©tails")
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    @discord.ui.button(label="Lancer", style=discord.ButtonStyle.primary, emoji="üéÆ")
    async def start_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.game.organizer.id:
            await interaction.response.send_message(
                _("loupgarou.only_organizer", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        if len(self.game.players) < 4:
            await interaction.response.send_message(
                _("loupgarou.not_enough_players", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        # V√©rifie que la distribution des r√¥les correspond au nombre de joueurs
        total_roles = sum(self.role_distribution.values())
        if total_roles != len(self.game.players):
            await interaction.response.send_message(
                _("loupgarou.role_mismatch", interaction.user.id, self.game.guild_id)
                .format(total_roles, len(self.game.players)),
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        self.stop()
        await self.cog.start_game(self.game, self.role_distribution)
    
    async def update_game_message(self):
        """Met √† jour le message de configuration"""
        if self.game.game_message:
            embed = self.create_embed()
            await self.game.game_message.edit(embed=embed, view=self)
    
    def create_embed(self) -> discord.Embed:
        """Cr√©e l'embed de configuration"""
        embed = discord.Embed(
            title=f"üê∫ {_('loupgarou.game_title', self.game.organizer.id, self.game.guild_id)}",
            description=_("loupgarou.game_description", self.game.organizer.id, self.game.guild_id),
            color=discord.Color.dark_red()
        )
        
        # Ajoute l'image du jeu
        embed.set_image(url=GAME_SETUP_IMAGE)
        
        players_list = "\n".join([f"‚Ä¢ {member.mention}" for member in self.game.players.values()])
        embed.add_field(
            name=f"üë• {_('loupgarou.players', self.game.organizer.id, self.game.guild_id)} ({len(self.game.players)})",
            value=players_list if players_list else _("loupgarou.no_players", self.game.organizer.id, self.game.guild_id),
            inline=False
        )
        
        roles_text = "\n".join([
            f"{ROLES[role]['emoji']} **{_(f'loupgarou.role.{role}', self.game.organizer.id, self.game.guild_id)}**: {count}"
            for role, count in self.role_distribution.items()
        ])
        embed.add_field(
            name=f"üé≠ {_('loupgarou.roles', self.game.organizer.id, self.game.guild_id)}",
            value=roles_text,
            inline=False
        )
        
        # Affiche les temps configur√©s
        debate_min = self.game.debate_time // 60
        debate_sec = self.game.debate_time % 60
        vote_min = self.game.vote_time // 60
        vote_sec = self.game.vote_time % 60
        
        debate_str = f"{debate_min}m{debate_sec}s" if debate_sec > 0 else f"{debate_min}m"
        vote_str = f"{vote_min}m{vote_sec}s" if vote_sec > 0 else f"{vote_min}m"
        
        embed.add_field(
            name=f"‚è±Ô∏è {_('loupgarou.time_settings', self.game.organizer.id, self.game.guild_id)}",
            value=f"üí¨ {_('loupgarou.debate_time_label', self.game.organizer.id, self.game.guild_id)}: {debate_str}\n"
                  f"üó≥Ô∏è {_('loupgarou.vote_time_label', self.game.organizer.id, self.game.guild_id)}: {vote_str}",
            inline=False
        )
        
        embed.set_footer(text=_("loupgarou.organizer", self.game.organizer.id, self.game.guild_id).format(self.game.organizer.name))
        
        return embed

class RulesView(discord.ui.View):
    """Vue pour afficher les r√®gles et les d√©tails des r√¥les"""
    
    def __init__(self, guild_id: int):
        super().__init__(timeout=300)
        self.guild_id = guild_id
        
        # Ajoute le menu de s√©lection des r√¥les
        self.add_item(RoleSelectMenu(guild_id))

class RoleSelectMenu(discord.ui.Select):
    """Menu de s√©lection pour voir les d√©tails d'un r√¥le"""
    
    def __init__(self, guild_id: int):
        self.guild_id = guild_id
        
        # Cr√©e les options pour chaque r√¥le disponible
        options = []
        for role_key in ["loup", "villageois", "voyante", "chasseur", "salvateur", "renard", "sorciere", "cupidon", "petite_fille", "ange"]:
            role_info = ROLES.get(role_key)
            if role_info:
                options.append(
                    discord.SelectOption(
                        label=_(f"loupgarou.role.{role_key}", None, guild_id),
                        value=role_key,
                        emoji=role_info["emoji"],
                        description=f"√âquipe : {role_info['team']}"
                    )
                )
        
        super().__init__(
            placeholder="S√©lectionnez un r√¥le pour voir ses d√©tails...",
            options=options,
            min_values=1,
            max_values=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_role = self.values[0]
        role_info = ROLES.get(selected_role)
        
        if not role_info:
            await interaction.response.send_message("R√¥le non trouv√©.", ephemeral=True)
            return
        
        # Cr√©e l'embed avec les d√©tails du r√¥le
        embed = discord.Embed(
            title=f"{role_info['emoji']} {_(f'loupgarou.role.{selected_role}', interaction.user.id, self.guild_id)}",
            description=_(f"loupgarou.role_description.{selected_role}", interaction.user.id, self.guild_id),
            color=discord.Color.gold()
        )
        
        # Ajoute l'image de la carte si disponible
        role_card = ROLE_CARDS.get(selected_role)
        if role_card:
            embed.set_image(url=role_card)
        
        # Ajoute des informations suppl√©mentaires
        team_emoji = "üê∫" if role_info["team"] == "loups" else "üë•" if role_info["team"] == "village" else "üíò" if role_info["team"] == "lovers" else "üòá"
        team_name = "Loups-Garous" if role_info["team"] == "loups" else "Village" if role_info["team"] == "village" else "Amoureux" if role_info["team"] == "lovers" else "Ange"
        
        embed.add_field(
            name="√âquipe",
            value=f"{team_emoji} {team_name}",
            inline=True
        )
        
        embed.add_field(
            name="Action de nuit",
            value="‚úÖ Oui" if role_info.get("night_action") else "‚ùå Non",
            inline=True
        )
        
        embed.set_footer(text="Utilisez le menu pour consulter d'autres r√¥les")
        
        await interaction.response.edit_message(embed=embed, view=self.view)

class RoleConfigModal(discord.ui.Modal):
    """Modal pour configurer la distribution des r√¥les"""
    
    def __init__(self, view: GameSetupView):
        super().__init__(title="Configuration des r√¥les")
        self.view = view
        
        # Ajoute des champs pour chaque r√¥le
        self.loups = discord.ui.TextInput(
            label="Nombre de Loups-Garous",
            placeholder="1",
            default=str(view.role_distribution.get("loup", 1)),
            min_length=1,
            max_length=2
        )
        self.add_item(self.loups)
        
        self.villageois = discord.ui.TextInput(
            label="Nombre de Villageois",
            placeholder="3",
            default=str(view.role_distribution.get("villageois", 3)),
            min_length=1,
            max_length=2
        )
        self.add_item(self.villageois)
        
        self.voyante = discord.ui.TextInput(
            label="Nombre de Voyantes",
            placeholder="0 ou 1",
            default=str(view.role_distribution.get("voyante", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.voyante)
        
        self.chasseur = discord.ui.TextInput(
            label="Nombre de Chasseurs",
            placeholder="0 ou 1",
            default=str(view.role_distribution.get("chasseur", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.chasseur)
        
        self.sorciere = discord.ui.TextInput(
            label="Nombre de Sorci√®res",
            placeholder="0 ou 1",
            default=str(view.role_distribution.get("sorciere", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.sorciere)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            self.view.role_distribution = {}
            
            loup_count = int(self.loups.value)
            if loup_count > 0:
                self.view.role_distribution["loup"] = loup_count
            
            villageois_count = int(self.villageois.value)
            if villageois_count > 0:
                self.view.role_distribution["villageois"] = villageois_count
            
            voyante_count = int(self.voyante.value)
            if voyante_count > 0:
                self.view.role_distribution["voyante"] = voyante_count
            
            chasseur_count = int(self.chasseur.value)
            if chasseur_count > 0:
                self.view.role_distribution["chasseur"] = chasseur_count
            
            sorciere_count = int(self.sorciere.value)
            if sorciere_count > 0:
                self.view.role_distribution["sorciere"] = sorciere_count
            
            await interaction.response.send_message(
                _("loupgarou.config_updated", interaction.user.id, self.view.game.guild_id),
                ephemeral=True
            )
            await self.view.update_game_message()
        
        except ValueError:
            await interaction.response.send_message(
                _("loupgarou.invalid_numbers", interaction.user.id, self.view.game.guild_id),
                ephemeral=True
            )

class TimeConfigModal(discord.ui.Modal):
    """Modal pour configurer les temps de d√©bat et de vote"""
    
    def __init__(self, view: GameSetupView):
        super().__init__(title="Configuration des temps")
        self.view = view
        
        # Champ pour le temps de d√©bat
        self.debate_time = discord.ui.TextInput(
            label="Temps de d√©bat (en secondes)",
            placeholder="60 (1 minute par d√©faut)",
            default=str(view.game.debate_time),
            min_length=1,
            max_length=4
        )
        self.add_item(self.debate_time)
        
        # Champ pour le temps de vote
        self.vote_time = discord.ui.TextInput(
            label="Temps de vote (en secondes)",
            placeholder="120 (2 minutes par d√©faut)",
            default=str(view.game.vote_time),
            min_length=1,
            max_length=4
        )
        self.add_item(self.vote_time)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            debate = int(self.debate_time.value)
            vote = int(self.vote_time.value)
            
            # Validation des valeurs (entre 10 secondes et 30 minutes)
            if not (10 <= debate <= 1800):
                await interaction.response.send_message(
                    _("loupgarou.invalid_debate_time", interaction.user.id, self.view.game.guild_id),
                    ephemeral=True
                )
                return
            
            if not (10 <= vote <= 1800):
                await interaction.response.send_message(
                    _("loupgarou.invalid_vote_time", interaction.user.id, self.view.game.guild_id),
                    ephemeral=True
                )
                return
            
            self.view.game.debate_time = debate
            self.view.game.vote_time = vote
            
            await interaction.response.send_message(
                _("loupgarou.time_config_updated", interaction.user.id, self.view.game.guild_id)
                .format(debate, vote),
                ephemeral=True
            )
            await self.view.update_game_message()
        
        except ValueError:
            await interaction.response.send_message(
                _("loupgarou.invalid_numbers", interaction.user.id, self.view.game.guild_id),
                ephemeral=True
            )

class SpecialRolesConfigModal(discord.ui.Modal):
    """Modal pour configurer les r√¥les sp√©ciaux"""
    
    def __init__(self, view: GameSetupView):
        super().__init__(title="R√¥les sp√©ciaux")
        self.view = view
        
        # Ajoute des champs pour les r√¥les sp√©ciaux impl√©ment√©s
        self.salvateur = discord.ui.TextInput(
            label="Nombre de Salvateurs",
            placeholder="0 ou 1 (Prot√®ge qqn chaque nuit)",
            default=str(view.role_distribution.get("salvateur", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.salvateur)
        
        self.renard = discord.ui.TextInput(
            label="Nombre de Renards",
            placeholder="0 ou 1 (Flaire 2 joueurs)",
            default=str(view.role_distribution.get("renard", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.renard)
        
        self.cupidon = discord.ui.TextInput(
            label="Nombre de Cupidons",
            placeholder="0 ou 1 (D√©signe 2 amoureux)",
            default=str(view.role_distribution.get("cupidon", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.cupidon)
        
        self.petite_fille = discord.ui.TextInput(
            label="Nombre de Petites Filles",
            placeholder="0 ou 1 (Espionne les loups)",
            default=str(view.role_distribution.get("petite_fille", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.petite_fille)
        
        self.ange = discord.ui.TextInput(
            label="Nombre d'Anges",
            placeholder="0 ou 1 (Gagne s'il meurt au 1er vote)",
            default=str(view.role_distribution.get("ange", 0)),
            min_length=1,
            max_length=1
        )
        self.add_item(self.ange)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Met √† jour la distribution uniquement pour les r√¥les sp√©ciaux impl√©ment√©s
            salvateur_count = int(self.salvateur.value)
            if salvateur_count > 0:
                self.view.role_distribution["salvateur"] = salvateur_count
            elif "salvateur" in self.view.role_distribution:
                del self.view.role_distribution["salvateur"]
            
            renard_count = int(self.renard.value)
            if renard_count > 0:
                self.view.role_distribution["renard"] = renard_count
            elif "renard" in self.view.role_distribution:
                del self.view.role_distribution["renard"]
            
            cupidon_count = int(self.cupidon.value)
            if cupidon_count > 0:
                self.view.role_distribution["cupidon"] = cupidon_count
            elif "cupidon" in self.view.role_distribution:
                del self.view.role_distribution["cupidon"]
            
            petite_fille_count = int(self.petite_fille.value)
            if petite_fille_count > 0:
                self.view.role_distribution["petite_fille"] = petite_fille_count
            elif "petite_fille" in self.view.role_distribution:
                del self.view.role_distribution["petite_fille"]
            
            ange_count = int(self.ange.value)
            if ange_count > 0:
                self.view.role_distribution["ange"] = ange_count
            elif "ange" in self.view.role_distribution:
                del self.view.role_distribution["ange"]
            
            await interaction.response.send_message(
                _("loupgarou.config_updated", interaction.user.id, self.view.game.guild_id),
                ephemeral=True
            )
            await self.view.update_game_message()
        
        except ValueError:
            await interaction.response.send_message(
                _("loupgarou.invalid_numbers", interaction.user.id, self.view.game.guild_id),
                ephemeral=True
            )

class VoteView(discord.ui.View):
    """Vue pour voter pendant la phase de jour"""
    
    def __init__(self, game: LoupGarouGame, cog):
        super().__init__(timeout=game.vote_time)
        self.game = game
        self.cog = cog
        self.vote_complete = asyncio.Event()
        
        # Cr√©e un select avec tous les joueurs vivants
        options = [
            discord.SelectOption(
                label=self.game.players[uid].display_name,
                value=str(uid),
                emoji="‚ùì"
            )
            for uid in self.game.alive_players
        ]
        
        self.player_select = discord.ui.Select(
            placeholder="Choisissez qui √©liminer...",
            options=options,
            min_values=1,
            max_values=1
        )
        self.player_select.callback = self.vote_callback
        self.add_item(self.player_select)
    
    async def vote_callback(self, interaction: discord.Interaction):
        if interaction.user.id not in self.game.alive_players:
            await interaction.response.send_message(
                _("loupgarou.dead_cant_vote", interaction.user.id, self.game.guild_id),
                ephemeral=True
            )
            return
        
        target_id = int(self.player_select.values[0])
        self.game.votes[interaction.user.id] = target_id
        
        # Enregistre le temps du vote
        import time
        if self.game.vote_start_time:
            self.game.vote_times[interaction.user.id] = time.time() - self.game.vote_start_time
        
        await interaction.response.send_message(
            _("loupgarou.vote_registered", interaction.user.id, self.game.guild_id)
            .format(self.game.players[target_id].display_name),
            ephemeral=True
        )
        
        # V√©rifie si tous les joueurs vivants ont vot√©
        if len(self.game.votes) >= len(self.game.alive_players):
            self.vote_complete.set()
            self.stop()

class LoupGarou(commands.Cog):
    """Cog pour le jeu du Loup-Garou"""
    
    def __init__(self, bot):
        self.bot = bot
        self.games: Dict[int, LoupGarouGame] = {}  # guild_id -> game
    
    @app_commands.command(name="loupgarou", description="Lance une partie de Loup-Garou")
    @log_command_usage
    async def loupgarou(self, interaction: discord.Interaction):
        """Commande pour lancer une partie de Loup-Garou"""
        
        # V√©rifie qu'il n'y a pas d√©j√† une partie en cours
        if interaction.guild_id in self.games:
            await interaction.response.send_message(
                f"{ERROR} {_('loupgarou.game_already_running', interaction.user.id, interaction.guild_id)}",
                ephemeral=True
            )
            return
        
        # Cr√©e une nouvelle partie
        game = LoupGarouGame(interaction.guild_id, interaction.channel, interaction.user)
        game.add_player(interaction.user)  # L'organisateur rejoint automatiquement
        self.games[interaction.guild_id] = game
        
        # Cr√©e la vue de configuration
        view = GameSetupView(game, self)
        embed = view.create_embed()
        
        await interaction.response.send_message(embed=embed, view=view)
        game.game_message = await interaction.original_response()
        
        logger.info(f"Partie de Loup-Garou cr√©√©e dans {interaction.guild.name} par {interaction.user.name}")
    
    @app_commands.command(name="loupgarou-stop", description="Arr√™te la partie de Loup-Garou en cours")
    @app_commands.checks.has_permissions(administrator=True)
    @log_command_usage
    async def loupgarou_stop(self, interaction: discord.Interaction):
        """Arr√™te une partie en cours"""
        
        if interaction.guild_id not in self.games:
            await interaction.response.send_message(
                f"{ERROR} {_('loupgarou.no_game_running', interaction.user.id, interaction.guild_id)}",
                ephemeral=True
            )
            return
        
        game = self.games[interaction.guild_id]
        
        # Seul l'organisateur ou un admin peut arr√™ter
        if interaction.user.id != game.organizer.id and not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                f"{ERROR} {_('loupgarou.only_organizer', interaction.user.id, interaction.guild_id)}",
                ephemeral=True
            )
            return
        
        del self.games[interaction.guild_id]
        
        await interaction.response.send_message(
            f"{SUCCESS} {_('loupgarou.game_stopped', interaction.user.id, interaction.guild_id)}"
        )
        
        logger.info(f"Partie de Loup-Garou arr√™t√©e dans {interaction.guild.name}")
    
    async def start_game(self, game: LoupGarouGame, role_distribution: Dict[str, int]):
        """D√©marre la partie"""
        game.phase = "starting"
        game.assign_roles(role_distribution)
        
        # V√©rifie d'abord que tous les joueurs peuvent recevoir des MPs
        failed_players = []
        for user_id in game.players.keys():
            member = game.players[user_id]
            try:
                await member.send("üéÆ V√©rification des messages priv√©s... Vous recevrez bient√¥t votre r√¥le !")
            except discord.Forbidden:
                failed_players.append(member)
        
        # Si des joueurs ne peuvent pas recevoir de MPs, annule la partie
        if failed_players:
            error_msg = f"{ERROR} **Impossible de d√©marrer la partie !**\n\n"
            error_msg += "Les joueurs suivants doivent activer leurs messages priv√©s :\n"
            error_msg += "\n".join([f"‚Ä¢ {member.mention}" for member in failed_players])
            error_msg += "\n\n*Demandez-leur d'activer les MPs dans les param√®tres du serveur, puis relancez la partie.*"
            
            await game.channel.send(error_msg)
            
            # Annule la partie
            if game.guild_id in self.games:
                del self.games[game.guild_id]
            
            logger.warning(f"Partie annul√©e - joueurs sans MPs: {[m.name for m in failed_players]}")
            return
        
        # Envoie les r√¥les aux joueurs en MP
        for user_id, role in game.roles.items():
            member = game.players[user_id]
            try:
                embed = discord.Embed(
                    title=f"{ROLES[role]['emoji']} {_(f'loupgarou.role.{role}', None, game.guild_id)}",
                    description=_(f"loupgarou.role_description.{role}", None, game.guild_id),
                    color=discord.Color.dark_red() if role == "loup" else discord.Color.blue()
                )
                embed.set_footer(text=_("loupgarou.role_secret", None, game.guild_id))
                
                # Ajoute l'image de la carte du r√¥le
                if role in ROLE_CARDS:
                    embed.set_image(url=ROLE_CARDS[role])
                
                await member.send(embed=embed)
            except discord.Forbidden:
                logger.warning(f"Impossible d'envoyer le r√¥le √† {member.name}")
        
        # Annonce le d√©but de la partie
        embed = discord.Embed(
            title=f"üåô {_('loupgarou.game_started', game.organizer.id, game.guild_id)}",
            description=_("loupgarou.game_started_description", game.organizer.id, game.guild_id),
            color=discord.Color.dark_blue()
        )
        # Ajoute l'image de distribution des r√¥les
        embed.set_image(url=ROLE_DISTRIBUTION_IMAGE)
        await game.channel.send(embed=embed)
        
        # Gestion de Cupidon si pr√©sent
        if "cupidon" in role_distribution and role_distribution["cupidon"] > 0:
            await self.cupidon_phase(game)
        
        # √âlection du maire
        await self.mayor_election(game)
        
        # Commence la premi√®re nuit
        await self.night_phase(game)
    
    async def cupidon_phase(self, game: LoupGarouGame):
        """Phase de Cupidon pour d√©signer les amoureux"""
        cupidon_id = next((uid for uid, role in game.roles.items() if role == "cupidon"), None)
        if not cupidon_id:
            return
        
        cupidon = game.players[cupidon_id]
        
        # Cr√©e un select pour choisir 2 joueurs
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="üíò"
            )
            for uid in game.alive_players
        ]
        
        view = discord.ui.View(timeout=60)
        select = discord.ui.Select(
            placeholder="Choisissez les deux amoureux...",
            options=options,
            min_values=2,
            max_values=2
        )
        
        lovers_chosen = asyncio.Event()
        
        async def cupidon_callback(interaction: discord.Interaction):
            if interaction.user.id != cupidon_id:
                await interaction.response.send_message("Ce n'est pas √† vous de choisir !", ephemeral=True)
                return
            
            game.lovers = [int(val) for val in select.values]
            await interaction.response.send_message(
                f"üíò Vous avez d√©sign√© {game.players[game.lovers[0]].mention} et {game.players[game.lovers[1]].mention} comme amoureux !",
                ephemeral=True
            )
            lovers_chosen.set()
        
        select.callback = cupidon_callback
        view.add_item(select)
        
        try:
            await cupidon.send("üíò **Cupidon**, choisissez deux joueurs qui seront li√©s par l'amour !", view=view)
            
            # Attend le choix avec timeout
            try:
                await asyncio.wait_for(lovers_chosen.wait(), timeout=60)
            except asyncio.TimeoutError:
                # Si pas de choix, s√©lection al√©atoire
                game.lovers = random.sample(list(game.alive_players), 2)
            
            # Informe les amoureux
            for lover_id in game.lovers:
                lover = game.players[lover_id]
                other_lover_id = game.lovers[0] if game.lovers[1] == lover_id else game.lovers[1]
                other_lover = game.players[other_lover_id]
                
                try:
                    await lover.send(f"üíò Vous √™tes tomb√©(e) amoureux(se) de {other_lover.mention} !")
                except discord.Forbidden:
                    pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message √† Cupidon")
    
    async def mayor_election(self, game: LoupGarouGame):
        """√âlection du maire"""
        embed = discord.Embed(
            title="üéñÔ∏è √âlection du Maire",
            description=_("loupgarou.mayor_election_description", None, game.guild_id),
            color=discord.Color.gold()
        )
        await game.channel.send(embed=embed)
        
        # Cr√©er les options de vote
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="üéñÔ∏è"
            )
            for uid in game.alive_players
        ]
        
        view = discord.ui.View(timeout=60)
        select = discord.ui.Select(
            placeholder=_("loupgarou.mayor_vote_placeholder", None, game.guild_id),
            options=options,
            min_values=1,
            max_values=1
        )
        
        mayor_votes: Dict[int, int] = {}  # voter_id -> candidate_id
        vote_complete = asyncio.Event()
        
        async def mayor_callback(interaction: discord.Interaction):
            if interaction.user.id not in game.alive_players:
                await interaction.response.send_message(
                    _("loupgarou.dead_cant_vote", None, game.guild_id),
                    ephemeral=True
                )
                return
            
            candidate_id = int(select.values[0])
            mayor_votes[interaction.user.id] = candidate_id
            
            await interaction.response.send_message(
                _("loupgarou.mayor_vote_registered", None, game.guild_id).format(
                    game.players[candidate_id].display_name
                ),
                ephemeral=True
            )
            
            # V√©rifier si tous les joueurs ont vot√©
            if len(mayor_votes) >= len(game.alive_players):
                vote_complete.set()
        
        select.callback = mayor_callback
        view.add_item(select)
        
        vote_message = await game.channel.send(
            _("loupgarou.mayor_voting_phase", None, game.guild_id),
            view=view
        )
        
        try:
            await asyncio.wait_for(vote_complete.wait(), timeout=60)
        except asyncio.TimeoutError:
            pass
        
        # Compter les votes
        vote_counts: Dict[int, int] = {}
        for candidate_id in mayor_votes.values():
            vote_counts[candidate_id] = vote_counts.get(candidate_id, 0) + 1
        
        # Trouver le gagnant
        if vote_counts:
            max_votes = max(vote_counts.values())
            winners = [cid for cid, count in vote_counts.items() if count == max_votes]
            
            if len(winners) > 1:
                # √âgalit√©, choix al√©atoire
                game.mayor = random.choice(winners)
            else:
                game.mayor = winners[0]
        else:
            # Personne n'a vot√©, choix al√©atoire
            game.mayor = random.choice(list(game.alive_players))
        
        # Annoncer le maire
        mayor = game.players[game.mayor]
        embed = discord.Embed(
            title="üéñÔ∏è " + _("loupgarou.mayor_elected", None, game.guild_id),
            description=_("loupgarou.mayor_elected_description", None, game.guild_id).format(mayor.mention),
            color=discord.Color.gold()
        )
        await game.channel.send(embed=embed)
    
    async def night_phase(self, game: LoupGarouGame):
        """Phase de nuit"""
        game.phase = "night"
        game.day_number += 1
        game.night_actions = {}
        game.petite_fille_spying = False  # R√©initialise l'√©tat
        
        embed = discord.Embed(
            title=f"üåô {_('loupgarou.night_falls', game.organizer.id, game.guild_id).format(game.day_number)}",
            description=_("loupgarou.night_description", game.organizer.id, game.guild_id),
            color=discord.Color.dark_blue()
        )
        await game.channel.send(embed=embed)
        
        # Phase de la petite fille (choisit d'espionner AVANT les loups)
        if any(game.roles.get(uid) == "petite_fille" for uid in game.alive_players):
            await self.petite_fille_choice(game)
        
        # Phase du salvateur (prot√®ge quelqu'un AVANT les loups)
        if any(game.roles.get(uid) == "salvateur" for uid in game.alive_players):
            status_msg = await game.channel.send("üõ°Ô∏è **Le salvateur se r√©veille et prot√®ge quelqu'un...**")
            await self.salvateur_action(game)
            await status_msg.edit(content="üõ°Ô∏è ~~Le salvateur se r√©veille et prot√®ge quelqu'un...~~ ‚úÖ")
        
        # Phase des loups-garous
        status_msg = await game.channel.send("üê∫ **Les loups-garous se r√©veillent et choisissent leur victime...**")
        await self.werewolves_action(game)
        await status_msg.edit(content="üê∫ ~~Les loups-garous se r√©veillent et choisissent leur victime...~~ ‚úÖ")
        
        # R√©sultat de l'espionnage de la petite fille (APR√àS la phase des loups)
        if game.petite_fille_spying:
            await self.petite_fille_result(game)
        
        # Phase de la voyante
        if any(game.roles.get(uid) == "voyante" for uid in game.alive_players):
            status_msg = await game.channel.send("üîÆ **La voyante se r√©veille et espionne un joueur...**")
            await self.seer_action(game)
            await status_msg.edit(content="üîÆ ~~La voyante se r√©veille et espionne un joueur...~~ ‚úÖ")
        
        # Phase du renard
        if any(game.roles.get(uid) == "renard" for uid in game.alive_players):
            status_msg = await game.channel.send("ü¶ä **Le renard se r√©veille et flaire deux joueurs...**")
            await self.renard_action(game)
            await status_msg.edit(content="ü¶ä ~~Le renard se r√©veille et flaire deux joueurs...~~ ‚úÖ")
        
        # Phase de la sorci√®re
        if any(game.roles.get(uid) == "sorciere" for uid in game.alive_players):
            status_msg = await game.channel.send("üßô‚Äç‚ôÄÔ∏è **La sorci√®re se r√©veille et d√©cide d'utiliser ses potions...**")
            await self.witch_action(game)
            await status_msg.edit(content="üßô‚Äç‚ôÄÔ∏è ~~La sorci√®re se r√©veille et d√©cide d'utiliser ses potions...~~ ‚úÖ")
        
        # Attend un peu avant de passer au jour
        await asyncio.sleep(5)
        
        # R√©solution de la nuit
        await self.resolve_night(game)
    
    async def werewolves_action(self, game: LoupGarouGame):
        """Action des loups-garous pendant la nuit"""
        werewolves = [uid for uid in game.alive_players if game.roles[uid] == "loup"]
        if not werewolves:
            return
        
        # Cr√©e un select pour choisir une victime
        non_werewolf_players = [uid for uid in game.alive_players if game.roles[uid] != "loup"]
        if not non_werewolf_players:
            return
        
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="üéØ"
            )
            for uid in non_werewolf_players
        ]
        
        view = discord.ui.View(timeout=45)
        select = discord.ui.Select(
            placeholder="Choisissez votre victime...",
            options=options,
            min_values=1,
            max_values=1
        )
        
        votes = {}
        vote_event = asyncio.Event()
        
        async def wolf_callback(interaction: discord.Interaction):
            if interaction.user.id not in werewolves:
                await interaction.response.send_message("Vous n'√™tes pas un loup-garou !", ephemeral=True)
                return
            
            victim_id = int(select.values[0])
            votes[interaction.user.id] = victim_id
            
            await interaction.response.send_message(
                f"Vous avez vot√© pour {game.players[victim_id].display_name}",
                ephemeral=True
            )
            
            # Si tous les loups ont vot√©
            if len(votes) == len(werewolves):
                vote_event.set()
        
        select.callback = wolf_callback
        view.add_item(select)
        
        # Envoie le message √† chaque loup
        for wolf_id in werewolves:
            wolf = game.players[wolf_id]
            try:
                await wolf.send("üê∫ **Loups-Garous**, choisissez votre victime pour cette nuit !", view=view)
            except discord.Forbidden:
                logger.warning(f"Impossible d'envoyer un message au loup {wolf.name}")
        
        # Attend les votes avec timeout
        try:
            await asyncio.wait_for(vote_event.wait(), timeout=45)
        except asyncio.TimeoutError:
            pass
        
        # D√©termine la victime (vote majoritaire ou al√©atoire)
        if votes:
            from collections import Counter
            vote_counts = Counter(votes.values())
            victim_id = vote_counts.most_common(1)[0][0]
            game.night_actions["werewolves"] = victim_id
    
    async def petite_fille_choice(self, game: LoupGarouGame):
        """La petite fille choisit d'espionner ou non les loups"""
        petite_fille_id = next((uid for uid in game.alive_players if game.roles[uid] == "petite_fille"), None)
        if not petite_fille_id:
            return
        
        petite_fille = game.players[petite_fille_id]
        
        # Cr√©er les boutons de choix
        view = discord.ui.View(timeout=30)
        spy_button = discord.ui.Button(label="Espionner üëÅÔ∏è", style=discord.ButtonStyle.danger)
        skip_button = discord.ui.Button(label="Dormir üò¥", style=discord.ButtonStyle.secondary)
        
        choice_made = asyncio.Event()
        will_spy = [False]
        
        async def spy_callback(interaction: discord.Interaction):
            if interaction.user.id != petite_fille_id:
                await interaction.response.send_message("Vous n'√™tes pas la petite fille !", ephemeral=True)
                return
            will_spy[0] = True
            choice_made.set()
            await interaction.response.send_message("Vous tentez d'espionner les loups... üïµÔ∏è", ephemeral=True)
        
        async def skip_callback(interaction: discord.Interaction):
            if interaction.user.id != petite_fille_id:
                await interaction.response.send_message("Vous n'√™tes pas la petite fille !", ephemeral=True)
                return
            choice_made.set()
            await interaction.response.send_message("Vous restez sagement dans votre lit. üò¥", ephemeral=True)
        
        spy_button.callback = spy_callback
        skip_button.callback = skip_callback
        view.add_item(spy_button)
        view.add_item(skip_button)
        
        embed = discord.Embed(
            title="üëß Petite Fille",
            description=(
                "La nuit est tomb√©e... Voulez-vous espionner les loups-garous ?\n\n"
                "‚ö†Ô∏è **Risque** : 30% de chance d'√™tre rep√©r√©e par les loups !\n"
                "üé≤ **R√©compense** : 50% de chance de d√©couvrir l'identit√© d'un loup\n\n"
                "Que souhaitez-vous faire ?"
            ),
            color=discord.Color.purple()
        )
        
        try:
            await petite_fille.send(embed=embed, view=view)
            
            try:
                await asyncio.wait_for(choice_made.wait(), timeout=30)
                game.petite_fille_spying = will_spy[0]
            except asyncio.TimeoutError:
                # Par d√©faut, elle dort
                game.petite_fille_spying = False
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message √† la petite fille")
            game.petite_fille_spying = False
    
    async def petite_fille_result(self, game: LoupGarouGame):
        """R√©sultat de l'espionnage de la petite fille (apr√®s la phase des loups)"""
        petite_fille_id = next((uid for uid in game.alive_players if game.roles[uid] == "petite_fille"), None)
        if not petite_fille_id or not game.petite_fille_spying:
            return
        
        petite_fille = game.players[petite_fille_id]
        werewolves = [uid for uid in game.alive_players if game.roles[uid] == "loup"]
        
        if not werewolves:
            return
        
        import random
        
        # 30% de chance d'√™tre rep√©r√©e (√©v√©nement ind√©pendant)
        caught = random.random() < 0.3
        
        # 50% de chance de rep√©rer un loup (√©v√©nement ind√©pendant)
        sees_wolf = random.random() < 0.5
        
        # Si rep√©r√©e, informe les loups (mais PAS la petite fille)
        if caught:
            for wolf_id in werewolves:
                wolf = game.players[wolf_id]
                embed = discord.Embed(
                    title="üëÅÔ∏è Quelqu'un vous espionne !",
                    description=(
                        f"Vous avez rep√©r√© **{petite_fille.display_name}** en train de vous espionner !\n\n"
                        f"C'est la **Petite Fille** üëß"
                    ),
                    color=discord.Color.orange()
                )
                try:
                    await wolf.send(embed=embed)
                except discord.Forbidden:
                    pass
        
        # Informe la petite fille de ce qu'elle a vu (ind√©pendamment d'avoir √©t√© rep√©r√©e)
        try:
            if sees_wolf:
                # Elle rep√®re un loup au hasard
                spotted_wolf_id = random.choice(werewolves)
                spotted_wolf = game.players[spotted_wolf_id]
                
                embed = discord.Embed(
                    title="üëß Petite Fille - Espionnage r√©ussi !",
                    description=(
                        f"‚úÖ Vous avez r√©ussi √† espionner les loups-garous !\n\n"
                        f"Vous avez rep√©r√© : **{spotted_wolf.display_name}** üê∫\n\n"
                        f"Cette personne est un **loup-garou** !"
                    ),
                    color=discord.Color.green()
                )
                embed.set_thumbnail(url=spotted_wolf.display_avatar.url)
                await petite_fille.send(embed=embed)
            
            else:
                # Elle n'a rien vu
                embed = discord.Embed(
                    title="üëß Petite Fille - Espionnage",
                    description=(
                        "üåô Vous avez tent√© d'espionner les loups-garous...\n\n"
                        "Mais vous n'avez rien pu voir de concret cette nuit.\n"
                        "Peut-√™tre aurez-vous plus de chance la prochaine fois !"
                    ),
                    color=discord.Color.blue()
                )
                await petite_fille.send(embed=embed)
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message √† la petite fille")
    
    async def salvateur_action(self, game: LoupGarouGame):
        """Action du salvateur pendant la nuit - prot√®ge une personne"""
        salvateur_id = next((uid for uid in game.alive_players if game.roles[uid] == "salvateur"), None)
        if not salvateur_id:
            return
        
        salvateur = game.players[salvateur_id]
        
        # Liste des joueurs pouvant √™tre prot√©g√©s (tous sauf celui prot√©g√© la nuit derni√®re)
        available_players = [
            uid for uid in game.alive_players 
            if uid != game.salvateur_last_protected
        ]
        
        if not available_players:
            return
        
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="üõ°Ô∏è",
                description="‚úÖ Peut √™tre prot√©g√©" if uid != salvateur_id else "‚ö†Ô∏è Vous-m√™me"
            )
            for uid in available_players
        ]
        
        view = discord.ui.View(timeout=30)
        select = discord.ui.Select(
            placeholder="Choisissez qui prot√©ger cette nuit...",
            options=options,
            min_values=1,
            max_values=1
        )
        
        protection_event = asyncio.Event()
        
        async def salvateur_callback(interaction: discord.Interaction):
            if interaction.user.id != salvateur_id:
                await interaction.response.send_message("Vous n'√™tes pas le salvateur !", ephemeral=True)
                return
            
            target_id = int(select.values[0])
            game.night_actions["salvateur"] = target_id
            game.salvateur_last_protected = target_id
            
            target_name = game.players[target_id].display_name
            message = f"üõ°Ô∏è Vous prot√©gez **{target_name}** cette nuit."
            
            if target_id == salvateur_id:
                message += "\n\n‚ö†Ô∏è Vous vous prot√©gez vous-m√™me !"
            
            await interaction.response.send_message(message, ephemeral=True)
            protection_event.set()
        
        select.callback = salvateur_callback
        view.add_item(select)
        
        # Cr√©e l'embed d'information
        embed = discord.Embed(
            title="üõ°Ô∏è Salvateur",
            description=(
                "**√Ä votre tour de prot√©ger quelqu'un !**\n\n"
                "Choisissez une personne √† prot√©ger contre les loups-garous cette nuit.\n\n"
            ),
            color=discord.Color.blue()
        )
        
        # Ajoute une note si quelqu'un √©tait prot√©g√© la nuit derni√®re
        if game.salvateur_last_protected:
            last_protected_name = game.players[game.salvateur_last_protected].display_name
            embed.add_field(
                name="‚ö†Ô∏è Restriction",
                value=f"Vous ne pouvez pas prot√©ger **{last_protected_name}** (prot√©g√© la nuit derni√®re)",
                inline=False
            )
        
        embed.add_field(
            name="‚ÑπÔ∏è Rappel",
            value="‚Ä¢ Vous pouvez vous prot√©ger vous-m√™me\n‚Ä¢ Vous ne pouvez pas prot√©ger la m√™me personne 2 nuits de suite",
            inline=False
        )
        
        try:
            await salvateur.send(embed=embed, view=view)
            
            try:
                await asyncio.wait_for(protection_event.wait(), timeout=30)
            except asyncio.TimeoutError:
                # Si pas de choix, ne prot√®ge personne
                pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message au salvateur")
    
    async def renard_action(self, game: LoupGarouGame):
        """Action du renard pendant la nuit - flaire deux joueurs pour savoir s'ils sont de la m√™me √©quipe"""
        renard_id = next((uid for uid in game.alive_players if game.roles[uid] == "renard"), None)
        if not renard_id:
            return
        
        renard = game.players[renard_id]
        
        # Liste des autres joueurs
        other_players = [uid for uid in game.alive_players if uid != renard_id]
        
        if len(other_players) < 2:
            return
        
        # Cr√©er une vue personnalis√©e pour s√©lectionner 2 joueurs
        class FoxSelectView(discord.ui.View):
            def __init__(self, game, renard_id, other_players):
                super().__init__(timeout=30)
                self.game = game
                self.renard_id = renard_id
                self.selected_players = []
                self.flair_event = asyncio.Event()
                
                # Premier select
                options1 = [
                    discord.SelectOption(
                        label=game.players[uid].display_name,
                        value=str(uid),
                        emoji="1Ô∏è‚É£"
                    )
                    for uid in other_players
                ]
                
                self.select1 = discord.ui.Select(
                    placeholder="Choisissez le premier joueur...",
                    options=options1,
                    min_values=1,
                    max_values=1,
                    custom_id="player1"
                )
                self.select1.callback = self.select_callback
                self.add_item(self.select1)
                
                # Deuxi√®me select
                options2 = [
                    discord.SelectOption(
                        label=game.players[uid].display_name,
                        value=str(uid),
                        emoji="2Ô∏è‚É£"
                    )
                    for uid in other_players
                ]
                
                self.select2 = discord.ui.Select(
                    placeholder="Choisissez le deuxi√®me joueur...",
                    options=options2,
                    min_values=1,
                    max_values=1,
                    custom_id="player2"
                )
                self.select2.callback = self.select_callback
                self.add_item(self.select2)
                
                # Bouton de confirmation
                self.confirm_button = discord.ui.Button(
                    label="Flairer ces deux joueurs",
                    style=discord.ButtonStyle.primary,
                    emoji="ü¶ä",
                    disabled=True
                )
                self.confirm_button.callback = self.confirm_callback
                self.add_item(self.confirm_button)
            
            async def select_callback(self, interaction: discord.Interaction):
                if interaction.user.id != self.renard_id:
                    await interaction.response.send_message("Vous n'√™tes pas le renard !", ephemeral=True)
                    return
                
                # R√©cup√®re les s√©lections
                player1 = self.select1.values[0] if self.select1.values else None
                player2 = self.select2.values[0] if self.select2.values else None
                
                # V√©rifie si deux joueurs diff√©rents sont s√©lectionn√©s
                if player1 and player2 and player1 != player2:
                    self.confirm_button.disabled = False
                    await interaction.response.edit_message(view=self)
                elif player1 == player2:
                    self.confirm_button.disabled = True
                    await interaction.response.send_message(
                        "‚ö†Ô∏è Vous devez choisir deux joueurs diff√©rents !",
                        ephemeral=True
                    )
                else:
                    await interaction.response.defer()
            
            async def confirm_callback(self, interaction: discord.Interaction):
                if interaction.user.id != self.renard_id:
                    await interaction.response.send_message("Vous n'√™tes pas le renard !", ephemeral=True)
                    return
                
                player1_id = int(self.select1.values[0])
                player2_id = int(self.select2.values[0])
                
                if player1_id == player2_id:
                    await interaction.response.send_message(
                        "‚ö†Ô∏è Vous devez choisir deux joueurs diff√©rents !",
                        ephemeral=True
                    )
                    return
                
                self.selected_players = [player1_id, player2_id]
                
                # D√©termine les √©quipes
                role1 = self.game.roles[player1_id]
                role2 = self.game.roles[player2_id]
                
                # Gestion sp√©ciale de l'ange au premier tour
                team1 = ROLES[role1]["team"]
                team2 = ROLES[role2]["team"]
                
                # Si c'est la premi√®re nuit et que l'ange n'a pas encore perdu
                if self.game.day_number == 1 and self.game.angel_id and not self.game.angel_first_vote_passed:
                    # L'ange est consid√©r√© comme une √©quipe √† part
                    if player1_id == self.game.angel_id:
                        team1 = "ange_solo"
                    if player2_id == self.game.angel_id:
                        team2 = "ange_solo"
                
                # Compare les √©quipes
                same_team = team1 == team2
                
                player1_name = self.game.players[player1_id].display_name
                player2_name = self.game.players[player2_id].display_name
                
                if same_team:
                    result_text = f"‚úÖ **{player1_name}** et **{player2_name}** font partie de la **m√™me √©quipe** !"
                    color = discord.Color.green()
                else:
                    result_text = f"‚ùå **{player1_name}** et **{player2_name}** ne font **pas partie de la m√™me √©quipe** !"
                    color = discord.Color.red()
                
                embed = discord.Embed(
                    title="ü¶ä Renard - R√©sultat du flair",
                    description=result_text,
                    color=color
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                self.flair_event.set()
        
        # Cr√©e l'embed d'information
        embed = discord.Embed(
            title="ü¶ä Renard",
            description=(
                "**C'est l'heure d'utiliser votre flair !**\n\n"
                "Choisissez deux joueurs et d√©couvrez s'ils appartiennent √† la m√™me √©quipe.\n\n"
                "‚ö†Ô∏è **Attention :** L'Ange au premier tour est consid√©r√© comme une √©quipe √† part."
            ),
            color=discord.Color.orange()
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è Comment √ßa marche ?",
            value=(
                "‚Ä¢ S√©lectionnez un premier joueur\n"
                "‚Ä¢ S√©lectionnez un deuxi√®me joueur (diff√©rent)\n"
                "‚Ä¢ Cliquez sur le bouton pour flairer\n"
                "‚Ä¢ Vous saurez s'ils sont de la m√™me √©quipe"
            ),
            inline=False
        )
        
        try:
            view = FoxSelectView(game, renard_id, other_players)
            await renard.send(embed=embed, view=view)
            
            try:
                await asyncio.wait_for(view.flair_event.wait(), timeout=30)
            except asyncio.TimeoutError:
                pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message au renard")
    
    async def seer_action(self, game: LoupGarouGame):
        """Action de la voyante pendant la nuit"""
        seer_id = next((uid for uid in game.alive_players if game.roles[uid] == "voyante"), None)
        if not seer_id:
            return
        
        seer = game.players[seer_id]
        
        # Cr√©e un select pour choisir un joueur √† espionner
        other_players = [uid for uid in game.alive_players if uid != seer_id]
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="‚ùì"
            )
            for uid in other_players
        ]
        
        view = discord.ui.View(timeout=30)
        select = discord.ui.Select(
            placeholder="Choisissez un joueur √† espionner...",
            options=options,
            min_values=1,
            max_values=1
        )
        
        vision_event = asyncio.Event()
        
        async def seer_callback(interaction: discord.Interaction):
            if interaction.user.id != seer_id:
                await interaction.response.send_message("Vous n'√™tes pas la voyante !", ephemeral=True)
                return
            
            target_id = int(select.values[0])
            target_role = game.roles[target_id]
            role_name = _(f'loupgarou.role.{target_role}', seer_id, game.guild_id)
            role_emoji = ROLES[target_role]["emoji"]
            
            await interaction.response.send_message(
                f"üîÆ Vous avez espionn√© {game.players[target_id].display_name}.\n"
                f"**R√¥le r√©v√©l√© :** {role_emoji} **{role_name}**",
                ephemeral=True
            )
            vision_event.set()
        
        select.callback = seer_callback
        view.add_item(select)
        
        try:
            await seer.send("üîÆ **Voyante**, choisissez un joueur √† espionner cette nuit !", view=view)
            
            try:
                await asyncio.wait_for(vision_event.wait(), timeout=30)
            except asyncio.TimeoutError:
                pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message √† la voyante")
    
    async def witch_action(self, game: LoupGarouGame):
        """Action de la sorci√®re pendant la nuit"""
        witch_id = next((uid for uid in game.alive_players if game.roles[uid] == "sorciere"), None)
        if not witch_id:
            return
        
        witch = game.players[witch_id]
        victim_id = game.night_actions.get("werewolves")
        
        # La sorci√®re peut voir qui va mourir et utiliser ses potions
        buttons = []
        
        if not game.sorciere_heal_used and victim_id:
            buttons.append(discord.ui.Button(label="üíö Sauver", style=discord.ButtonStyle.green, custom_id="heal"))
        
        if not game.sorciere_poison_used:
            buttons.append(discord.ui.Button(label="‚ò†Ô∏è Empoisonner", style=discord.ButtonStyle.red, custom_id="poison"))
        
        buttons.append(discord.ui.Button(label="‚è≠Ô∏è Passer", style=discord.ButtonStyle.gray, custom_id="skip"))
        
        if not buttons or (len(buttons) == 1 and buttons[0].custom_id == "skip"):
            return
        
        view = discord.ui.View(timeout=30)
        for button in buttons:
            view.add_item(button)
        
        witch_event = asyncio.Event()
        
        async def witch_callback(interaction: discord.Interaction):
            if interaction.user.id != witch_id:
                await interaction.response.send_message("Vous n'√™tes pas la sorci√®re !", ephemeral=True)
                return
            
            action = interaction.data["custom_id"]
            
            if action == "heal":
                game.night_actions["witch_heal"] = victim_id
                game.sorciere_heal_used = True
                await interaction.response.send_message("üíö Vous avez sauv√© la victime !", ephemeral=True)
            
            elif action == "poison":
                # Demande qui empoisonner
                poison_options = [
                    discord.SelectOption(
                        label=game.players[uid].display_name,
                        value=str(uid),
                        emoji="‚ò†Ô∏è"
                    )
                    for uid in game.alive_players if uid != witch_id
                ]
                
                poison_view = discord.ui.View(timeout=20)
                poison_select = discord.ui.Select(
                    placeholder="Choisissez qui empoisonner...",
                    options=poison_options,
                    min_values=1,
                    max_values=1
                )
                
                async def poison_callback(poison_interaction: discord.Interaction):
                    poison_target = int(poison_select.values[0])
                    game.night_actions["witch_poison"] = poison_target
                    game.sorciere_poison_used = True
                    await poison_interaction.response.send_message(
                        f"‚ò†Ô∏è Vous avez empoisonn√© {game.players[poison_target].display_name} !",
                        ephemeral=True
                    )
                    witch_event.set()
                
                poison_select.callback = poison_callback
                poison_view.add_item(poison_select)
                
                await interaction.response.send_message("‚ò†Ô∏è Choisissez qui empoisonner :", view=poison_view, ephemeral=True)
                return
            
            else:  # skip
                await interaction.response.send_message("Vous n'utilisez aucune potion.", ephemeral=True)
            
            witch_event.set()
        
        for button in buttons:
            button.callback = witch_callback
        
        message = "üßô‚Äç‚ôÄÔ∏è **Sorci√®re**, c'est votre tour !"
        if victim_id:
            message += f"\n\nLes loups ont choisi {game.players[victim_id].display_name} comme victime."
        
        try:
            await witch.send(message, view=view)
            
            try:
                await asyncio.wait_for(witch_event.wait(), timeout=30)
            except asyncio.TimeoutError:
                pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message √† la sorci√®re")
    
    async def resolve_night(self, game: LoupGarouGame):
        """R√©sout les actions de la nuit"""
        victims = []
        
        # R√©cup√®re qui est prot√©g√© par le salvateur
        salvateur_protected = game.night_actions.get("salvateur")
        
        # Victime des loups
        werewolf_victim = game.night_actions.get("werewolves")
        if werewolf_victim:
            # V√©rifie si la sorci√®re a sauv√©
            if game.night_actions.get("witch_heal") == werewolf_victim:
                pass  # Sauv√© par la sorci√®re
            # V√©rifie si le salvateur a prot√©g√©
            elif salvateur_protected == werewolf_victim:
                pass  # Prot√©g√© par le salvateur
            else:
                victims.append(werewolf_victim)
                game.last_victim = werewolf_victim
        
        # Victime de la sorci√®re
        witch_victim = game.night_actions.get("witch_poison")
        if witch_victim:
            # Le poison ignore la protection du salvateur
            victims.append(witch_victim)
        
        # Tue les victimes
        for victim_id in victims:
            game.kill_player(victim_id)
        
        # Annonce les morts
        await self.announce_deaths(game, victims, salvateur_protected)
        
        # V√©rifie la victoire
        winner = game.check_victory()
        if winner:
            await self.end_game(game, winner)
            return
        
        # Passe au jour
        await self.day_phase(game)
    
    async def announce_deaths(self, game: LoupGarouGame, victims: List[int], salvateur_protected: Optional[int] = None):
        """Annonce les morts de la nuit"""
        embed = discord.Embed(
            title=f"‚òÄÔ∏è {_('loupgarou.day_breaks', game.organizer.id, game.guild_id)}",
            color=discord.Color.gold()
        )
        
        if not victims:
            # V√©rifie si quelqu'un a √©t√© prot√©g√©
            if salvateur_protected and game.night_actions.get("werewolves") == salvateur_protected:
                # Le salvateur a sauv√© la victime des loups
                embed.description = (
                    _("loupgarou.no_deaths", game.organizer.id, game.guild_id) + 
                    f"\n\nüõ°Ô∏è *Une personne a √©t√© prot√©g√©e cette nuit...*"
                )
            else:
                embed.description = _("loupgarou.no_deaths", game.organizer.id, game.guild_id)
        else:
            deaths_text = []
            for victim_id in victims:
                victim = game.players[victim_id]
                role = game.roles[victim_id]
                deaths_text.append(f"üíÄ {victim.mention} ({ROLES[role]['emoji']} {_(f'loupgarou.role.{role}', game.organizer.id, game.guild_id)})")
            
            embed.description = "\n".join(deaths_text)
            
            # Si une seule victime, ajoute sa photo de profil
            if len(victims) == 1:
                victim = game.players[victims[0]]
                embed.set_thumbnail(url=victim.display_avatar.url)
        
        await game.channel.send(embed=embed)
        
        # Chasseur peut tirer
        for victim_id in victims:
            if game.roles[victim_id] == "chasseur":
                await self.hunter_action(game, victim_id)
    
    async def hunter_action(self, game: LoupGarouGame, hunter_id: int):
        """Le chasseur tire sur quelqu'un en mourant"""
        hunter = game.players[hunter_id]
        
        options = [
            discord.SelectOption(
                label=game.players[uid].display_name,
                value=str(uid),
                emoji="üéØ"
            )
            for uid in game.alive_players
        ]
        
        view = discord.ui.View(timeout=30)
        select = discord.ui.Select(
            placeholder="Choisissez qui abattre...",
            options=options,
            min_values=1,
            max_values=1
        )
        
        shot_event = asyncio.Event()
        target = [None]
        
        async def hunter_callback(interaction: discord.Interaction):
            if interaction.user.id != hunter_id:
                await interaction.response.send_message("Vous n'√™tes pas le chasseur !", ephemeral=True)
                return
            
            target[0] = int(select.values[0])
            await interaction.response.send_message(
                f"üèπ Vous avez tir√© sur {game.players[target[0]].display_name} !",
                ephemeral=True
            )
            shot_event.set()
        
        select.callback = hunter_callback
        view.add_item(select)
        
        try:
            await hunter.send("üèπ **Chasseur**, vous √™tes mort ! Choisissez qui abattre avec vous !", view=view)
            
            try:
                await asyncio.wait_for(shot_event.wait(), timeout=30)
                
                if target[0]:
                    game.kill_player(target[0])
                    victim = game.players[target[0]]
                    role = game.roles[target[0]]
                    
                    embed = discord.Embed(
                        title="üèπ Le chasseur tire !",
                        description=f"{hunter.mention} abat {victim.mention} ({ROLES[role]['emoji']} {_(f'loupgarou.role.{role}', game.organizer.id, game.guild_id)}) !",
                        color=discord.Color.orange()
                    )
                    embed.set_thumbnail(url=victim.display_avatar.url)
                    await game.channel.send(embed=embed)
            
            except asyncio.TimeoutError:
                pass
        
        except discord.Forbidden:
            logger.warning(f"Impossible d'envoyer un message au chasseur")
    
    async def day_phase(self, game: LoupGarouGame):
        """Phase de jour - discussion et vote"""
        game.phase = "day"
        
        # Formatage du temps de d√©bat
        debate_min = game.debate_time // 60
        debate_sec = game.debate_time % 60
        if debate_min > 0 and debate_sec > 0:
            debate_str = f"{debate_min} minute{'s' if debate_min > 1 else ''} {debate_sec}s"
        elif debate_min > 0:
            debate_str = f"{debate_min} minute{'s' if debate_min > 1 else ''}"
        else:
            debate_str = f"{debate_sec} secondes"
        
        embed = discord.Embed(
            title=f"‚òÄÔ∏è {_('loupgarou.day_phase', game.organizer.id, game.guild_id).format(game.day_number)}",
            description=_("loupgarou.day_description", game.organizer.id, game.guild_id).format(debate_str),
            color=discord.Color.gold()
        )
        
        # Liste les joueurs vivants
        alive_list = "\n".join([
            f"‚Ä¢ {game.players[uid].mention}"
            for uid in game.alive_players
        ])
        embed.add_field(
            name=f"üë• {_('loupgarou.alive_players', game.organizer.id, game.guild_id)} ({len(game.alive_players)})",
            value=alive_list,
            inline=False
        )
        
        discussion_msg = await game.channel.send(embed=embed)
        
        # Attend un peu pour la discussion avec compte √† rebours
        discussion_time = game.debate_time
        for remaining in range(discussion_time, 0, -15):
            if remaining < discussion_time:
                embed.set_footer(text=f"‚è±Ô∏è Discussion - Temps restant: {remaining}s")
                try:
                    await discussion_msg.edit(embed=embed)
                except:
                    pass
            await asyncio.sleep(min(15, remaining))
        
        # Phase de vote
        await self.voting_phase(game)
    
    async def voting_phase(self, game: LoupGarouGame):
        """Phase de vote pour √©liminer un joueur"""
        game.phase = "voting"
        game.votes = {}
        game.vote_times = {}
        
        import time
        game.vote_start_time = time.time()
        
        # Formatage du temps de vote
        vote_min = game.vote_time // 60
        vote_sec = game.vote_time % 60
        if vote_min > 0 and vote_sec > 0:
            vote_str = f"{vote_min} minute{'s' if vote_min > 1 else ''} {vote_sec}s"
        elif vote_min > 0:
            vote_str = f"{vote_min} minute{'s' if vote_min > 1 else ''}"
        else:
            vote_str = f"{vote_sec} secondes"
        
        embed = discord.Embed(
            title=f"üó≥Ô∏è {_('loupgarou.voting_phase', game.organizer.id, game.guild_id)}",
            description=_("loupgarou.voting_description", game.organizer.id, game.guild_id).format(vote_str),
            color=discord.Color.blue()
        )
        
        view = VoteView(game, self)
        vote_message = await game.channel.send(embed=embed, view=view)
        
        # Attend les votes avec compte √† rebours
        timeout = game.vote_time
        start_time = asyncio.get_event_loop().time()
        
        try:
            while True:
                # Attend soit la fin du timeout, soit que tous aient vot√©
                remaining = timeout - (asyncio.get_event_loop().time() - start_time)
                if remaining <= 0:
                    break
                
                try:
                    await asyncio.wait_for(view.vote_complete.wait(), timeout=min(remaining, 30))
                    # Tous ont vot√© !
                    break
                except asyncio.TimeoutError:
                    # Met √† jour le compte √† rebours toutes les 30s
                    remaining = timeout - (asyncio.get_event_loop().time() - start_time)
                    if remaining > 0:
                        embed.set_footer(text=f"‚è±Ô∏è Temps restant: {int(remaining)}s | Votes: {len(game.votes)}/{len(game.alive_players)}")
                        try:
                            await vote_message.edit(embed=embed)
                        except:
                            pass
        except Exception as e:
            logger.error(f"Erreur pendant le vote: {e}")
        
        # Mise √† jour finale pour afficher le compte correct
        embed.set_footer(text=f"‚úÖ Vote termin√© | Votes: {len(game.votes)}/{len(game.alive_players)}")
        try:
            await vote_message.edit(embed=embed)
        except:
            pass
        
        # Compte les votes
        await self.resolve_vote(game)
    
    async def resolve_vote(self, game: LoupGarouGame):
        """R√©sout le vote du village"""
        if not game.votes:
            embed = discord.Embed(
                title=f"{INFO} {_('loupgarou.no_votes', game.organizer.id, game.guild_id)}",
                description=_("loupgarou.no_elimination", game.organizer.id, game.guild_id),
                color=discord.Color.blue()
            )
            await game.channel.send(embed=embed)
        else:
            from collections import Counter
            vote_counts = Counter(game.votes.values())
            
            # Affiche les r√©sultats avec comptage
            results_text = []
            for target_id, count in vote_counts.most_common():
                target = game.players[target_id]
                results_text.append(f"‚Ä¢ {target.mention}: **{count}** vote(s)")
            
            # D√©tail des votes (qui a vot√© pour qui et quand)
            vote_details = []
            # Trie par temps de vote
            sorted_voters = sorted(game.vote_times.items(), key=lambda x: x[1])
            for voter_id, vote_time in sorted_voters:
                voter = game.players[voter_id]
                target = game.players[game.votes[voter_id]]
                minutes = int(vote_time // 60)
                seconds = int(vote_time % 60)
                time_str = f"{minutes}m{seconds}s" if minutes > 0 else f"{seconds}s"
                vote_details.append(f"‚Ä¢ {voter.mention} ‚Üí {target.mention} *(apr√®s {time_str})*")
            
            # D√©termine l'√©limin√©
            max_votes = vote_counts.most_common(1)[0][1]
            top_voted = [uid for uid, count in vote_counts.items() if count == max_votes]
            
            if len(top_voted) > 1:
                # √âgalit√© - le maire d√©cide
                embed = discord.Embed(
                    title=f"{INFO} {_('loupgarou.vote_tie', game.organizer.id, game.guild_id)}",
                    description="\n".join(results_text),
                    color=discord.Color.blue()
                )
                if vote_details:
                    embed.add_field(
                        name="üìä D√©tail des votes",
                        value="\n".join(vote_details),
                        inline=False
                    )
                await game.channel.send(embed=embed)
                
                # Le maire d√©cide
                if game.mayor and game.mayor in game.alive_players:
                    mayor = game.players[game.mayor]
                    
                    # Cr√©er les options pour le maire
                    options = [
                        discord.SelectOption(
                            label=game.players[uid].display_name,
                            value=str(uid),
                            emoji="‚öñÔ∏è"
                        )
                        for uid in top_voted if uid in game.alive_players
                    ]
                    
                    view = discord.ui.View(timeout=30)
                    select = discord.ui.Select(
                        placeholder=_("loupgarou.mayor_decide_placeholder", None, game.guild_id),
                        options=options,
                        min_values=1,
                        max_values=1
                    )
                    
                    decision_made = asyncio.Event()
                    chosen_id = [None]
                    
                    async def mayor_decision_callback(interaction: discord.Interaction):
                        if interaction.user.id != game.mayor:
                            await interaction.response.send_message(
                                _("loupgarou.only_mayor_can_decide", None, game.guild_id),
                                ephemeral=True
                            )
                            return
                        
                        chosen_id[0] = int(select.values[0])
                        await interaction.response.send_message(
                            _("loupgarou.mayor_decision_made", None, game.guild_id),
                            ephemeral=True
                        )
                        decision_made.set()
                    
                    select.callback = mayor_decision_callback
                    view.add_item(select)
                    
                    embed = discord.Embed(
                        title="üéñÔ∏è " + _("loupgarou.mayor_decides", None, game.guild_id),
                        description=_("loupgarou.mayor_decides_description", None, game.guild_id).format(mayor.mention),
                        color=discord.Color.gold()
                    )
                    await game.channel.send(embed=embed, view=view)
                    
                    try:
                        await asyncio.wait_for(decision_made.wait(), timeout=30)
                        if chosen_id[0]:
                            eliminated_id = chosen_id[0]
                        else:
                            # Timeout, choix al√©atoire
                            eliminated_id = random.choice(top_voted)
                    except asyncio.TimeoutError:
                        # Timeout, choix al√©atoire
                        eliminated_id = random.choice(top_voted)
                    
                    # Annoncer la d√©cision du maire
                    eliminated = game.players[eliminated_id]
                    role = game.roles[eliminated_id]
                    game.kill_player(eliminated_id)
                    
                    embed = discord.Embed(
                        title=f"üéñÔ∏è {_('loupgarou.mayor_decision', None, game.guild_id)}",
                        description=(
                            f"{mayor.mention} a d√©cid√© d'√©liminer {eliminated.mention} !\n" +
                            f"C'√©tait {ROLES[role]['emoji']} **{_(f'loupgarou.role.{role}', None, game.guild_id)}**"
                        ),
                        color=discord.Color.red()
                    )
                    embed.set_thumbnail(url=eliminated.display_avatar.url)
                    await game.channel.send(embed=embed)
                    
                    # V√©rifier si c'est l'ange au premier vote
                    if game.angel_id == eliminated_id and not game.angel_first_vote_passed:
                        await self.angel_wins(game, eliminated_id)
                        return
                    
                    # Chasseur peut tirer
                    if role == "chasseur":
                        await self.hunter_action(game, eliminated_id)
                else:
                    # Pas de maire, personne n'est √©limin√©
                    pass
            else:
                eliminated_id = top_voted[0]
                eliminated = game.players[eliminated_id]
                role = game.roles[eliminated_id]
                
                game.kill_player(eliminated_id)
                
                embed = discord.Embed(
                    title=f"‚öñÔ∏è {_('loupgarou.player_eliminated', game.organizer.id, game.guild_id)}",
                    description=(
                        f"**{_('loupgarou.vote_results', game.organizer.id, game.guild_id)}:**\n" +
                        "\n".join(results_text) +
                        f"\n\n{eliminated.mention} a √©t√© √©limin√©(e) !\n" +
                        f"C'√©tait {ROLES[role]['emoji']} **{_(f'loupgarou.role.{role}', game.organizer.id, game.guild_id)}**"
                    ),
                    color=discord.Color.red()
                )
                # Ajoute la photo de profil du mort
                embed.set_thumbnail(url=eliminated.display_avatar.url)
                
                # Ajoute le d√©tail des votes
                if vote_details:
                    embed.add_field(
                        name="üìä D√©tail des votes",
                        value="\n".join(vote_details),
                        inline=False
                    )
                
                await game.channel.send(embed=embed)
                
                # V√©rifier si c'est l'ange au premier vote
                if game.angel_id == eliminated_id and not game.angel_first_vote_passed:
                    await self.angel_wins(game, eliminated_id)
                    return
                
                # Chasseur peut tirer
                if role == "chasseur":
                    await self.hunter_action(game, eliminated_id)
        
        # Marquer que le premier vote est pass√© (pour l'ange)
        if not game.angel_first_vote_passed:
            game.angel_first_vote_passed = True
        
        # V√©rifie la victoire
        winner = game.check_victory()
        if winner:
            await self.end_game(game, winner)
            return
        
        # Retourne √† la nuit
        await asyncio.sleep(5)
        await self.night_phase(game)
    
    async def angel_wins(self, game: LoupGarouGame, angel_id: int):
        """L'ange gagne en solo"""
        game.phase = "ended"
        
        angel = game.players[angel_id]
        
        embed = discord.Embed(
            title=f"üëº {_('loupgarou.angel_wins', None, game.guild_id)}",
            description=_("loupgarou.angel_wins_description", None, game.guild_id).format(angel.mention),
            color=discord.Color.gold()
        )
        embed.set_thumbnail(url=angel.display_avatar.url)
        
        # Affiche tous les r√¥les
        roles_text = []
        for user_id, role in game.roles.items():
            member = game.players[user_id]
            status = "üíÄ" if user_id in game.dead_players else "‚úÖ"
            roles_text.append(
                f"{status} {member.mention}: {ROLES[role]['emoji']} {_(f'loupgarou.role.{role}', None, game.guild_id)}"
            )
        
        embed.add_field(
            name=f"üé≠ {_('loupgarou.roles_reveal', None, game.guild_id)}",
            value="\n".join(roles_text),
            inline=False
        )
        
        await game.channel.send(embed=embed)
        
        # Supprime la partie de la liste
        if game.guild_id in self.games:
            del self.games[game.guild_id]
    
    async def end_game(self, game: LoupGarouGame, winner: str):
        """Termine la partie"""
        game.phase = "ended"
        
        if winner == "village":
            title = f"üéâ {_('loupgarou.village_wins', game.organizer.id, game.guild_id)}"
            color = discord.Color.green()
        elif winner == "loups":
            title = f"üê∫ {_('loupgarou.werewolves_win', game.organizer.id, game.guild_id)}"
            color = discord.Color.dark_red()
        else:  # lovers
            title = f"üíò {_('loupgarou.lovers_win', game.organizer.id, game.guild_id)}"
            color = discord.Color.purple()
        
        embed = discord.Embed(
            title=title,
            description=_("loupgarou.game_over", game.organizer.id, game.guild_id),
            color=color
        )
        
        # Affiche tous les r√¥les
        roles_text = []
        for user_id, role in game.roles.items():
            member = game.players[user_id]
            status = "üíÄ" if user_id in game.dead_players else "‚úÖ"
            roles_text.append(
                f"{status} {member.mention}: {ROLES[role]['emoji']} {_(f'loupgarou.role.{role}', game.organizer.id, game.guild_id)}"
            )
        
        embed.add_field(
            name=f"üé≠ {_('loupgarou.roles_reveal', game.organizer.id, game.guild_id)}",
            value="\n".join(roles_text),
            inline=False
        )
        
        await game.channel.send(embed=embed)
        
        # Supprime la partie
        if game.guild_id in self.games:
            del self.games[game.guild_id]
        
        logger.info(f"Partie de Loup-Garou termin√©e dans la guilde {game.guild_id} - Victoire: {winner}")

async def setup(bot):
    await bot.add_cog(LoupGarou(bot))
